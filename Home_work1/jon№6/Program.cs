// Задача 6: Напишите программу, которая на вход принимает число и выдаёт, является ли число чётным (делится ли оно на два без остатка).
// 4 -> да
// -3 -> нет
// 7 -> нет

// Здесь объявим две переменные end и input
// end мы присвоим значение с которым будем сравнивать input
// input присвоим значение пустоты, вот так: ""
// А можно ее просто объявить без приствоения какого-либо значения
string? end = "конец", input = "";

// В этом цикле во-первых приводим input к нижнему регистру
// и while будт циклиться до тех пор пока input не равен end, т.е. пока пользователь не напишет ключ-фразу для остановки игры (слово конец)
while(input?.ToLower() != end){

    // объявляем переменную с целочисленным типом
    int number;

    // Здесь конструкция несовсем уместная (но рабочая), которую писал сам
    
    // Выполним хотя бы раз то, что указано в do
    do{
        // Пытаемся сделать следующее, буквально try - пытаемся
        try{
            // Принимаем на ввод число и проверяем, точно ли тут число? Например, могут ввести букву или, не вводя ничего, нажать Enter
            Console.Write("Укажите какое-нибудь целое число: ");
            number = Convert.ToInt32(Console.ReadLine());
            // Если try удался, сработает брейк из выйдем из цикла
            break;
        // если попытка записать число не удалась, у нас возникает ошибка ввода (прям во всех случаях ввода чего-то, отличного от целого числа со знаком)
        // отлавливаем эту ошибку через catch, буквально catch - поймать
        // в скобочках указываем, что именно мы ловим - FormatException.
        // FormatException – некорректный формат операнда или аргумента. Именно он и будет у нас возникать при вводе чего-угодно, кроме целого числа
        }catch (FormatException){
            // сообщаем пользователю, что у нас ошибка и просим ввести число
            // т.е. опять прыгаем в try
            // и будем туда прыгать, пока не получим на вводе число
            Console.WriteLine("Неверный формат ввода. Введите целое число");
        }
    }
    // здесь зацикленный while, т.е. while(true) - бесконечный цикл.
    // оборвется он только тогда, когда try будет удачным
    while(true);


    // Пример, аналогичный тому, что выше, но другим способом. Габиль подсказал такой вариант.
    // Нам не нужно указывать do до цикла, т.к. цикл зациклен - тавтология, ну ладно :)
    /*while(true){
        // также пытаемся получить число
        try{
            Console.Write("Укажите какое-нибудь целое число: ");
            number = Convert.ToInt32(Console.ReadLine());
            // также выйдем из цикла
            break;
        // также ловим ошибку FormatException, но с небольшим изменением - объявляем переменную ex
        // ex будет хранить как раз описание ошибки
        }catch (FormatException ex){
            // в строке вывода текста на консольку, перед самим текстом указываем значек переменной - $
            // $ - позволит нам извлекать в строке значение переменной ex
            // в фигурных скобках через метод .Message как раз и выведем значение ex
            Console.WriteLine($"{ex.Message} Введите целое число");
        }
    }*/

    // Это интересный вариант замены конструкции try - catch с помощью метода TryParse от Габиля
    // while уже знаком
    /*while(true){
        Console.Write("Укажите какое-нибудь целое число: ");
        // Вот тут объявлем строковую перемнную strNumber, куда пишем ввод пользователя
        string strNumber = Console.ReadLine();
        // а здесь вместо try - catch знакомые уже if - else
        // int.TryParse - метод, преобразующий строковое представление числа в эквивалентное ему 32-битовое целое число со знаком. 
        // Возвращает значение, указывающее, успешно ли выполнена операция. Т.е. тут работает Булева логика
        // если преобразование прошло успешно - тогда вренется true и значение будет записано в переменную number
        // если преобразование не успешно - получим false и в переменную number записано ничего не будет
        if(int.TryParse(strNumber, out number)){
            // если TryParse вернул true - обрываем цикл
            break;
        }else{
            // если TryParse вернул false - продолжаем цикл
            Console.WriteLine("Неверный формат ввода. Введите число");
        }
    }*/

    // как только получили корректные данные для работы - выполняем поставленную задачу
    // Проверяем - делится ли число на 2 без остатка
    if(number % 2 == 0){
        // если остаток 0 - четное
        Console.WriteLine("Указанное число: "+number+" - это четное число.");
    }else{
        // если нет - нечетное
        Console.WriteLine("Указанное число: "+number+" - нечетное число.");
    }

    // а вот тут операции, относящиеся к самому первому циклу while(input?.ToLower() != end)
    // после вычисления задачи предлагаем пользователю продолжить играть или закончить
    Console.WriteLine("Если хотите закончить играть, напишите - Конец. А для продолжения - нажмите Enter");
    // соотв. если пользователь пишет в консольке что-угодно или жмет Enter, мы это записываем в переменную input
    // по условию while(input?.ToLower() != end) наш input не равен end (помните, в самом начале мы дали значение этой переменной - конец), цикл продолжаем, играем дальше
    // а если ввести в консольке слово "конец" - то наш input станет равен end, цикл оборвется и мы выйдем из программы
    input = Console.ReadLine();
}
